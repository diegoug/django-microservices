"""
Django settings for user_ms project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_MICROSERVICES_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ.get('DEBUG', False) == 'True' else False

# hosts -----------------------------------------------------------------------
SERVICE_NAME = os.environ.get('POSTGRES_USER_MS_DATABASE_NAME', '')

DOMAIN_NAME = os.environ.get('DOMAIN_NAME', '')

ALLOWED_HOSTS = []
ALLOWED_MICROSERVICES = []

if DEBUG:
    SERVICE_ALIAS = 'dev'
    ALLOWED_HOSTS.append(
        '{}.{}'.format((SERVICE_NAME).replace('_','-'), DOMAIN_NAME))
else:
    SERVICE_ALIAS = 'prod'
    ALLOWED_HOSTS.append(
        '{}.{}'.format(SERVICE_NAME, DOMAIN_NAME))

ALLOWED_MICROSERVICES.append('{}_{}'.format(SERVICE_NAME, SERVICE_ALIAS))

ALLOWED_HOSTS.extend(ALLOWED_MICROSERVICES)

CORS_ORIGIN_ALLOW_ALL = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Application definition ------------------------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # common microservices user app
    'oauth2_provider',
    'rest_framework',
    'profiles',
    # microservice
    'user'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    '{}.middleware.TimezoneMiddleware'.format(SERVICE_NAME),
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '{}.urls'.format(SERVICE_NAME)

STATIC_ROOT = os.path.join(BASE_DIR, "static")

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = '/{}/static/'.format(SERVICE_NAME)

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/var/www/example.com/media/"
MEDIA_ROOT = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'media')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://example.com/media/", "http://media.example.com/"
MEDIA_URL = '/{}/media/'.format(SERVICE_NAME)

WSGI_APPLICATION = '{}.wsgi.application'.format(SERVICE_NAME)

AUTH_USER_MODEL = 'profiles.User'

# Database --------------------------------------------------------------------
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get(
            'POSTGRES_USER_MS_DATABASE_NAME', ''),
        'USER': os.environ.get(
            'POSTGRES_USER_MS_USER', ''),
        'PASSWORD': os.environ.get(
            'POSTGRES_USER_MS_PASSWORD', ''),
        'HOST': os.environ.get(
            'POSTGRES_USER_MS_HOST', '0.0.0.0'),
        'PORT': '5432',
    }
}

DATABASE_ROUTERS = [
    '{}.django_admin_db_router.DjangoRouter'.format(SERVICE_NAME)
]

DATA_UPLOAD_MAX_NUMBER_FIELDS = 3000

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Password validation ---------------------------------------------------------
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.'
        'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
        'MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
        'CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
        'NumericPasswordValidator',
    },
]


# Internationalization --------------------------------------------------------
# https://docs.djangoproject.com/en/4.0/topics/i18n/

TIME_ZONE = 'UTC'

USE_TZ = True
USE_I18N = True
USE_L10N = False

# Language
LANGUAGE_CODE = 'en-us'
LANGUAGES = (
    ('en', _('English')),
    ('es', _('Spanish')),
)

# Define url folder language
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

# Django rest framework -------------------------------------------------------
# https://www.django-rest-framework.org/api-guide/pagination/

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
    'MAX_PAGE_SIZE': 100,
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        'oauth2_provider.contrib.rest_framework.TokenHasReadWriteScope'
    )
}

# Django OAuth Toolkit
# https://django-oauth-toolkit.readthedocs.io/en/latest/rest-framework/getting_started.html#step-1-minimal-setup

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 
               'groups': 'Access to your groups', 
               'introspection': 'introspection'}
}

# external credentials --------------------------------------------------------
